import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "io.micronaut.application" version '1.0.3'
    id 'org.liquibase.gradle' version '2.0.4'
    id "com.google.cloud.tools.jib" version "1.8.0"
}

version "0.1"
group "com.grananda"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental true
        annotations "com.grananda.*"
    }
}

dependencies {
    compileOnly("io.micronaut.data:micronaut-data-processor")
    compileOnly("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jdbc-tomcat")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.liquibase:micronaut-liquibase")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("mysql:mysql-connector-java")
    implementation("com.github.javafaker:javafaker:1.0.2")
    compile("com.devskiller.friendly-id:friendly-id:1.1.0")
    compile group: 'org.jasypt', name: 'jasypt', version: '1.9.3'

    // https://mvnrepository.com/artifact/software.amazon.awssdk/rekognition
    compile group: 'software.amazon.awssdk', name: 'rekognition', version: '2.15.9'
}

mainClassName = "com.grananda.Application"
java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

jib.from.image = 'adoptopenjdk/openjdk11:jdk-11.0.8_10-alpine-slim'
jib.to.image = 'facecheck-api:latest'
jib.container.creationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
jib.container.filesModificationTime = "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
jib.container.ports = ['8080']





